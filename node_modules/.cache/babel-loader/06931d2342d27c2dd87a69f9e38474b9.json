{"ast":null,"code":"var _jsxFileName = \"/home/courtney/dev/FinalProject/Front-End-Final/src/components/Main.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Post from './Post.js';\nimport Form from './Form.js';\nlet baseUrl = '';\n\nif (process.env.NODE_ENV === 'development') {\n  baseUrl = 'http://localhost:5000';\n} else {\n  console.log('this is for heroku');\n}\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchPosts = () => {\n      fetch(`${baseUrl}`).then(data => data.json()).then(jData => {\n        this.setState({\n          posts: jData\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.handleCreate = createData => {\n      console.log('create', createData);\n      fetch(`${baseUrl}/post`, {\n        body: JSON.stringify(createData),\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(createdPost => {\n        return createdPost.json();\n      }).then(jsonedPost => {\n        console.log(jsonedPost);\n        this.props.handleView('home');\n        this.setState(prevState => {\n          prevState.posts = jsonedPost;\n          return {\n            posts: prevState.posts\n          };\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.handleUpdate = updatedData => {\n      console.log(updatedData);\n      fetch(`${baseUrl}/${updatedData._id}`, {\n        body: JSON.stringify(updatedData),\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(updatedItem => {\n        this.props.handleView('home');\n        this.fetchPosts();\n      }).catch(err => console.log(err));\n    };\n\n    this.handleDelete = id => {\n      console.log(id);\n      fetch(`${baseUrl}/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(json => {\n        this.fetchPosts();\n        this.setState(prevState => {\n          const posts = prevState.posts.filter(post => post._id !== id);\n          return {\n            posts\n          };\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      posts: []\n    };\n  } //FETCH\n\n\n  // componentDidMount() {\n  //   axios.get(`${baseUrl}`)\n  //     .then(res => {\n  //       this.setState({ posts:res.data });\n  //     })\n  //     // .catch (err) => {\n  //     //   console.log(err);\n  //     // }\n  // };\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, this.props.view.pageTitle), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, this.props.view.page === 'home' ? this.state.posts.map(postData => /*#__PURE__*/React.createElement(Post, {\n      key: postData._id,\n      postData: postData,\n      handleView: this.props.handleView,\n      handleDelete: this.handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(Form, {\n      handleCreate: this.handleCreate,\n      formInputs: this.props.formInputs,\n      view: this.props.view,\n      handleUpdate: this.handleUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/courtney/dev/FinalProject/Front-End-Final/src/components/Main.js"],"names":["React","axios","Post","Form","baseUrl","process","env","NODE_ENV","console","log","Main","Component","constructor","props","fetchPosts","fetch","then","data","json","jData","setState","posts","catch","err","handleCreate","createData","body","JSON","stringify","method","headers","createdPost","jsonedPost","handleView","prevState","handleUpdate","updatedData","_id","updatedItem","handleDelete","id","filter","post","state","componentDidMount","render","view","pageTitle","page","map","postData","formInputs"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,IAAIC,OAAO,GAAG,EAAd;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,OAAO,GAAG,uBAAV;AACD,CAFD,MAEO;AACLI,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;AAED,MAAMC,IAAN,SAAmBV,KAAK,CAACW,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,UARmB,GAQN,MAAM;AACnBC,MAAAA,KAAK,CAAE,GAAEX,OAAQ,EAAZ,CAAL,CACCY,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMG,KAAK,IAAI;AACb,aAAKC,QAAL,CAAc;AACZC,UAAAA,KAAK,EAAEF;AADK,SAAd;AAGD,OAND,EAMGG,KANH,CAMSC,GAAG,IAAIf,OAAO,CAACC,GAAR,CAAYc,GAAZ,CANhB;AAOC,KAhBkB;;AAAA,SAmBnBC,YAnBmB,GAmBHC,UAAD,IAAgB;AAC7BjB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBgB,UAAtB;AACAV,MAAAA,KAAK,CAAE,GAAEX,OAAQ,OAAZ,EAAoB;AACvBsB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,UAAf,CADiB;AAEvBI,QAAAA,MAAM,EAAE,MAFe;AAGvBC,QAAAA,OAAO,EAAE;AACP,oBAAU,mCADH;AAEP,0BAAgB;AAFT;AAHc,OAApB,CAAL,CAOGd,IAPH,CAOQe,WAAW,IAAI;AACrB,eAAOA,WAAW,CAACb,IAAZ,EAAP;AACD,OATD,EASGF,IATH,CASQgB,UAAU,IAAI;AACpBxB,QAAAA,OAAO,CAACC,GAAR,CAAYuB,UAAZ;AACA,aAAKnB,KAAL,CAAWoB,UAAX,CAAsB,MAAtB;AACA,aAAKb,QAAL,CAAcc,SAAS,IAAI;AACzBA,UAAAA,SAAS,CAACb,KAAV,GAAkBW,UAAlB;AACA,iBAAO;AACLX,YAAAA,KAAK,EAAEa,SAAS,CAACb;AADZ,WAAP;AAGD,SALD;AAMD,OAlBD,EAkBGC,KAlBH,CAkBSC,GAAG,IAAIf,OAAO,CAACC,GAAR,CAAYc,GAAZ,CAlBhB;AAmBD,KAxCkB;;AAAA,SA2CnBY,YA3CmB,GA2CHC,WAAD,IAAiB;AAC9B5B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,WAAZ;AACArB,MAAAA,KAAK,CAAE,GAAEX,OAAQ,IAAGgC,WAAW,CAACC,GAAI,EAA/B,EAAkC;AACrCX,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeQ,WAAf,CAD+B;AAErCP,QAAAA,MAAM,EAAE,KAF6B;AAGrCC,QAAAA,OAAO,EAAE;AACP,oBAAU,mCADH;AAEP,0BAAgB;AAFT;AAH4B,OAAlC,CAAL,CAOGd,IAPH,CAOQsB,WAAW,IAAI;AACrB,aAAKzB,KAAL,CAAWoB,UAAX,CAAsB,MAAtB;AACA,aAAKnB,UAAL;AACD,OAVD,EAUGQ,KAVH,CAUSC,GAAG,IAAIf,OAAO,CAACC,GAAR,CAAYc,GAAZ,CAVhB;AAWD,KAxDkB;;AAAA,SA2DnBgB,YA3DmB,GA2DHC,EAAD,IAAQ;AACrBhC,MAAAA,OAAO,CAACC,GAAR,CAAY+B,EAAZ;AACAzB,MAAAA,KAAK,CAAE,GAAEX,OAAQ,IAAGoC,EAAG,EAAlB,EAAqB;AACxBX,QAAAA,MAAM,EAAE,QADgB;AAExBC,QAAAA,OAAO,EAAE;AACP,oBAAU,mCADH;AAEP,0BAAgB;AAFT;AAFe,OAArB,CAAL,CAMGd,IANH,CAMQE,IAAI,IAAI;AACd,aAAKJ,UAAL;AACA,aAAKM,QAAL,CAAcc,SAAS,IAAI;AACzB,gBAAMb,KAAK,GAAGa,SAAS,CAACb,KAAV,CAAgBoB,MAAhB,CAAuBC,IAAI,IAAIA,IAAI,CAACL,GAAL,KAAYG,EAA3C,CAAd;AACA,iBAAO;AAACnB,YAAAA;AAAD,WAAP;AACD,SAHD;AAID,OAZD,EAYGC,KAZH,CAYSC,GAAG,IAAIf,OAAO,CAACC,GAAR,CAAYc,GAAZ,CAZhB;AAaD,KA1EkB;;AAEjB,SAAKoB,KAAL,GAAa;AACXtB,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD,GANgC,CAQnC;;;AAqEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAuB,EAAAA,iBAAiB,GAAG;AAClB,SAAK9B,UAAL;AACD;;AAED+B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKhC,KAAL,CAAWiC,IAAX,CAAgBC,SAArB,CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,KAAKlC,KAAL,CAAWiC,IAAX,CAAgBE,IAAhB,KAAyB,MAAzB,GACC,KAAKL,KAAL,CAAWtB,KAAX,CAAiB4B,GAAjB,CAAsBC,QAAD,iBACpB,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,QAAQ,CAACb,GADhB;AAEE,MAAA,QAAQ,EAAEa,QAFZ;AAGE,MAAA,UAAU,EAAE,KAAKrC,KAAL,CAAWoB,UAHzB;AAIE,MAAA,YAAY,EAAE,KAAKM,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,gBASE,oBAAC,IAAD;AACE,MAAA,YAAY,EAAE,KAAKf,YADrB;AAEE,MAAA,UAAU,EAAE,KAAKX,KAAL,CAAWsC,UAFzB;AAGE,MAAA,IAAI,EAAE,KAAKtC,KAAL,CAAWiC,IAHnB;AAIE,MAAA,YAAY,EAAE,KAAKX,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CAFA,CADF;AAuBD;;AAnHgC;;AAuHnC,eAAezB,IAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Post from './Post.js';\nimport Form from './Form.js';\n\nlet baseUrl = '';\nif (process.env.NODE_ENV === 'development') {\n  baseUrl = 'http://localhost:5000'\n} else {\n  console.log('this is for heroku');\n}\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      posts: []\n    }\n  }\n\n//FETCH\n  fetchPosts = () => {\n  fetch(`${baseUrl}`)\n  .then(data => data.json())\n  .then(jData => {\n    this.setState({\n      posts: jData\n    })\n  }).catch(err => console.log(err))\n  }\n\n//CREATE\n  handleCreate = (createData) => {\n    console.log('create', createData);\n    fetch(`${baseUrl}/post`, {\n      body: JSON.stringify(createData),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(createdPost => {\n      return createdPost.json()\n    }).then(jsonedPost => {\n      console.log(jsonedPost)\n      this.props.handleView('home')\n      this.setState(prevState => {\n        prevState.posts = jsonedPost\n        return {\n          posts: prevState.posts\n        }\n      })\n    }).catch(err => console.log(err))\n  }\n\n//UPDATE\n  handleUpdate = (updatedData) => {\n    console.log(updatedData);\n    fetch(`${baseUrl}/${updatedData._id}`, {\n      body: JSON.stringify(updatedData),\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(updatedItem => {\n      this.props.handleView('home')\n      this.fetchPosts()\n    }).catch(err => console.log(err))\n  }\n\n//DELETE\n  handleDelete = (id) => {\n    console.log(id);\n    fetch(`${baseUrl}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(json => {\n      this.fetchPosts()\n      this.setState(prevState => {\n        const posts = prevState.posts.filter(post => post._id !==id)\n        return {posts}\n      })\n    }).catch(err => console.log(err))\n  }\n\n  // componentDidMount() {\n  //   axios.get(`${baseUrl}`)\n  //     .then(res => {\n  //       this.setState({ posts:res.data });\n  //     })\n  //     // .catch (err) => {\n  //     //   console.log(err);\n  //     // }\n  // };\n\n  componentDidMount() {\n    this.fetchPosts()\n  }\n\n  render() {\n    return(\n      <div>\n      <h1>{this.props.view.pageTitle}</h1>\n      <div>\n    { this.props.view.page === 'home' ?\n       this.state.posts.map((postData) => (\n        <Post\n          key={postData._id}\n          postData={postData}\n          handleView={this.props.handleView}\n          handleDelete={this.handleDelete}\n        />\n      ))\n      : <Form\n          handleCreate={this.handleCreate}\n          formInputs={this.props.formInputs}\n          view={this.props.view}\n          handleUpdate={this.handleUpdate}\n        />\n    }\n      </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}